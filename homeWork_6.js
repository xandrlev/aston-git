/*
1) Почитать про принципы программирования KISS, DRY, YAGNI + почитать про "Антипаттерны" Чистого кода

  - KISS (Keep It Simple, Stupid) - призывает к простоте и минимизации в кода
  - DRY (Don’t Repeat Yourself) - один и тот же код не должен дублироваться
  - YAGNI (You Aren’t Gonna Need It) - не следует добавлять функциональность, которая не пригодится в будущем

  "Антипаттерны" Чистого кода - это подходы, которые противоречат принципам чистого кода и могут привести к ухудшению его качества.
  - Преждевременная оптимизация - попытки навести оптимизацию до получения результатов приведут к усложнению кода и появлению ошибок
  - Магические числа и строки - Использование безымянных чисел или строковых констант вместо именованных констант в коде
  - Лапша из кода - Переплетение логики в одном месте без четкой структуры
  - Программирование копированием и вставкой - Буквальное копирование кода из одного места в другое
  - Божественный объект (God Object) - когда нарушается принцип "разделяй и властвуй" или Single Responsibility с SOLID принципов
  - Аналитический паралич - переизбыток анализа до такой степени, что прогресс и действия останавливаются
  - Изобретение колеса/велосипеда - реализация собственного решения с нуля если уже существуют решения
  - Бесполезные (полтергейстные) - классы без зависимостей, используются для вызова методов другого класса или просто добавляют ненужный слой абстракции
  - Лодочный якорь - сохранение неиспользуемых частей системы, которые остались после оптимизации или рефакторинга
  - Программирование перебором
  - Избыточное использование комментариев
  

2) Прочитать про способы хранения LocalStorage, SessionStorage и Cookie
  - LocalStorage (локальное хранилище) - это место в браузере пользователя, в котором сайты могут сохранять разные данные бессрочно.
    Очищается только с помощью JavaScript или при очистке кэша браузера. Максимальный объём данных составляет 5 МБ, что является самым большим.
    Не поддерживается старыми браузерами, такими как IE 7 и ниже. Работает по правилу ограничения домена (same origin policy), что означает,
    что сохранённые данные доступны только для одного источника.

  - SessionStorage (сессионное хранилище) - это объект sessionStorage, который позволяет хранить данные для каждого домена, доступные на протяжении сессии,
    пока открыт браузер, и даже в том случае, если была осуществлена перезагрузка страницы. Каждая вкладка браузера хранит уникальные данные.

  Объекты хранилища localStorage и sessionStorage предоставляют одинаковые методы и свойства:
    setItem(key, value) – сохранить пару ключ/значение.
    getItem(key) – получить данные по ключу key.
    removeItem(key) – удалить данные с ключом key.
    clear() – удалить всё.
    key(index) – получить ключ на заданной позиции.
    length – количество элементов в хранилище.

  - Cookie - Хранит данные, которые можно передавать на сервер через заголовки. Срок хранения устанавливается при создании cookie.
    Объём данных не превышает 4 Кбайт. Cookie могут быть защищёнными, и их содержимое нельзя получить на стороне клиента.
    Это важно для аутентификации при хранении пользовательских токенов.


3) HTML / CSS - Базовая структура html документа, БЭМ методология

  - <!DOCTYPE html>: Объявляет тип документа и версию HTML (HTML5 в данном случае).
    <html lang="en">: Открывающий тег HTML с указанием языка документа.
      Он открывает и закрывает документ HTML и содержит все остальные элементы документа.
    <head>: Заголовочная часть документа, содержащая мета-информацию, стили, скрипты и другие элементы, не отображаемые на странице.
      <title>: Заголовок страницы, который отображается в строке заголовка браузера.
    <body>: Основная часть документа, содержащая видимое содержимое веб-страницы (заголовок, навигацию, статьи и т. д.).
      <header>, <main> и <footer> — это семантические блоки, которые помогают организовать контент.
    Скрипты: JavaScript-код размещается перед закрывающим тегом </body> для обеспечения асинхронной загрузки страницы.

  - БЭМ методология - это компонентный подход к веб-разработке, разработанный в Яндексе. Основная идея заключается в разделении интерфейса
  на независимые блоки:
    - Блок - Основной строительный блок интерфейса. Представляет собой независимый компонент, например, кнопку, форму, меню.
      Имеет уникальное имя. Для разделения слов в именах используется дефис (-).
    - Элемент - Часть блока, которая не может существовать вне него. Привязан к конкретному блоку.
      Имеет имя, состоящее из блока и элемента через двойное подчеркивание (например, header__logo).
    - Модификатор - Изменяет внешний вид или поведение блока или элемента. Используется для создания разных вариаций одного компонента.
      Модификатор отделяется одним (_) подчеркиванием.

4) Почитать про паттерны функционального программирования + посмотреть примеры использования

  - Функции высшего порядка (Higher-Order Functions) - Возможность передавать функции как аргументы.
    Возвращение функций из других функций.
  - Функции обратного вызова (Callback Functions - Использование функций в качестве аргументов.
  - Чистые функции (Pure Functions) - Функции, которые всегда возвращают одинаковый результат для одних и тех же входных данных, и не имеют побочных эффектов.
  - Каррирование (Currying) - Преобразование функции с несколькими аргументами в последовательность функций с одним аргументом.
  - Неизменяемость (Immutability) - Избегание изменения данных после их создания.
  - Функции композиции (Function Composition) - Cочетание нескольких функций для создания новой функции.
  - Рекурсия (Recursion) - Процесс, при котором функция вызывает саму себя.

5) Способы позиционирования контента на странице

  - Статическое позиционирование (position: static): Это поведение по умолчанию для каждого элемента.
    Он занимает свое нормальное место в потоке документа.
  - Относительное позиционирование (position: relative): Этот тип позиционирования позволяет модифицировать окончательное положение элемента
    относительно его исходного места в потоке документа. Можно сдвигать элементы внутри нормального потока, при этом они могут перекрывать другие элементы на странице.
  - Абсолютное позиционирование (position: absolute): Элемент с абсолютным позиционированием вырывается из нормального потока и позиционируется
    относительно ближайшего родительского элемента с позиционированием, или относительно окна просмотра браузера, если такого родительского элемента нет.
  - Фиксированное позиционирование (position: fixed): Элемент с фиксированным позиционированием всегда остается на одном и том же месте в окне просмотра браузера, даже при прокрутке страницы. 
  - Закрепленное позиционирование (position: sticky): Элемент с закрепленным позиционированием начинает вести себя как статический элемент,
    но после прокрутки страницы он “прилипает” к определенной позиции на экране.
  - Float (float: left, float: right, float: both): Изначально использовалось для “обтекания” текстом изображений.
    Стало одним из наиболее часто используемых инструментов для создания макетов из нескольких столбцов на веб-страницах. 
  - Flexbox (display: flex): Модуль, который позволяет создавать гибкие и отзывчивые макеты веб-страниц.
  - Grid Layout (display: grid): Модуль CSS, который предоставляет систему для создания гибких и отзывчивых макетов на веб-страницах. 

6) Веса селекторов

- Специфичность (веса селекторов)  - это алгоритм, по которому браузер определяет какие стили из набора применятся к элементу.
  Специфичность селектора рассчитывается по 4-м позициям: 
    style=""        1,0,0,0
    #id             0,1,0,0
    .class          0,0,1,0
    [attr=value]    0,0,1,0
    <tag>           0,0,0,1
    \*              0,0,0,0
  Комбинаторы +, >, ~, универсальный селектор * и псевдокласс :where() веса не имеют.
  Псевдоклассы :is(), :has() и :not() принимают вес наиболее специфичного селектора внутри скобок.
*/
